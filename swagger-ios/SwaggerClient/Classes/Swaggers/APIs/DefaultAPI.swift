//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Get all books of a specific gender

     - parameter lastName: (path) Specify author&#x27;s last name 
     - parameter format: (query)  (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func audiobooksAuthorlastNameGet(lastName: String, format: String? = nil, extended: Int? = nil, completion: @escaping ((_ data: BooksResponse?,_ error: Error?) -> Void)) {
        audiobooksAuthorlastNameGetWithRequestBuilder(lastName: lastName, format: format, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all books of a specific gender
     - GET /audiobooks/author/^{lastName}
     - 

     - examples: [{contentType=application/json, example={
  "books" : [ {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  }, {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  } ]
}}]
     - parameter lastName: (path) Specify author&#x27;s last name 
     - parameter format: (query)  (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)

     - returns: RequestBuilder<BooksResponse> 
     */
    open class func audiobooksAuthorlastNameGetWithRequestBuilder(lastName: String, format: String? = nil, extended: Int? = nil) -> RequestBuilder<BooksResponse> {
        var path = "/audiobooks/author/^{lastName}"
        let lastNamePreEscape = "\(lastName)"
        let lastNamePostEscape = lastNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lastName}", with: lastNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "extended": extended?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BooksResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all books of a specific gender

     - parameter genre: (path) Specify the gender 
     - parameter format: (query)  (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func audiobooksGenregenreGet(genre: String, format: String? = nil, extended: Int? = nil, completion: @escaping ((_ data: BooksResponse?,_ error: Error?) -> Void)) {
        audiobooksGenregenreGetWithRequestBuilder(genre: genre, format: format, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all books of a specific gender
     - GET /audiobooks/genre/^{genre}
     - 

     - examples: [{contentType=application/json, example={
  "books" : [ {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  }, {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  } ]
}}]
     - parameter genre: (path) Specify the gender 
     - parameter format: (query)  (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)

     - returns: RequestBuilder<BooksResponse> 
     */
    open class func audiobooksGenregenreGetWithRequestBuilder(genre: String, format: String? = nil, extended: Int? = nil) -> RequestBuilder<BooksResponse> {
        var path = "/audiobooks/genre/^{genre}"
        let genrePreEscape = "\(genre)"
        let genrePostEscape = genrePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{genre}", with: genrePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "extended": extended?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BooksResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all books

     - parameter format: (query)  (optional)
     - parameter keywords: (query) Search by gender (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func audiobooksGet(format: String? = nil, keywords: String? = nil, extended: Int? = nil, completion: @escaping ((_ data: BooksResponse?,_ error: Error?) -> Void)) {
        audiobooksGetWithRequestBuilder(format: format, keywords: keywords, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all books
     - GET /audiobooks

     - examples: [{contentType=application/json, example={
  "books" : [ {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  }, {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  } ]
}}]
     - parameter format: (query)  (optional)
     - parameter keywords: (query) Search by gender (optional)
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)

     - returns: RequestBuilder<BooksResponse> 
     */
    open class func audiobooksGetWithRequestBuilder(format: String? = nil, keywords: String? = nil, extended: Int? = nil) -> RequestBuilder<BooksResponse> {
        let path = "/audiobooks"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "keywords": keywords, 
                        "extended": extended?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BooksResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Returns a book by ID.

     - parameter bookId: (path) Parameter description in CommonMark or HTML. 
     - parameter format: (query)  
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func audiobooksIdBookIdGet(bookId: Int64, format: String, extended: Int? = nil, completion: @escaping ((_ data: BooksResponse?,_ error: Error?) -> Void)) {
        audiobooksIdBookIdGetWithRequestBuilder(bookId: bookId, format: format, extended: extended).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns a book by ID.
     - GET /audiobooks/id/{bookId}/
     - 

     - examples: [{contentType=application/json, example={
  "books" : [ {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  }, {
    "num_sections" : "num_sections",
    "url_rss" : "url_rss",
    "totaltimesecs" : 0,
    "description" : "description",
    "language" : "language",
    "title" : "title",
    "sections" : [ {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    }, {
      "readers" : [ {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      }, {
        "reader_id" : "reader_id",
        "display_name" : "display_name"
      } ],
      "file_name" : "file_name",
      "genres" : [ null, null ],
      "language" : "language",
      "id" : "id",
      "playtime" : "playtime",
      "title" : "title",
      "listen_url" : "listen_url",
      "section_number" : "section_number"
    } ],
    "url_project" : "url_project",
    "totaltime" : "totaltime",
    "genres" : [ {
      "name" : "name",
      "id" : "id"
    }, {
      "name" : "name",
      "id" : "id"
    } ],
    "url_zip_file" : "url_zip_file",
    "url_librivox" : "url_librivox",
    "id" : "id",
    "authors" : [ {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    }, {
      "last_name" : "last_name",
      "id" : "id",
      "first_name" : "first_name"
    } ]
  } ]
}}]
     - parameter bookId: (path) Parameter description in CommonMark or HTML. 
     - parameter format: (query)  
     - parameter extended: (query) Set to 1 to retrieve all available information for each book (optional, default to 0)

     - returns: RequestBuilder<BooksResponse> 
     */
    open class func audiobooksIdBookIdGetWithRequestBuilder(bookId: Int64, format: String, extended: Int? = nil) -> RequestBuilder<BooksResponse> {
        var path = "/audiobooks/id/{bookId}/"
        let bookIdPreEscape = "\(bookId)"
        let bookIdPostEscape = bookIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{bookId}", with: bookIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format, 
                        "extended": extended?.encodeToJSON()
        ])


        let requestBuilder: RequestBuilder<BooksResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all books

     - parameter format: (query)  (optional, default to json)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authorsGet(format: String? = nil, completion: @escaping ((_ data: AuthorsResponse?,_ error: Error?) -> Void)) {
        authorsGetWithRequestBuilder(format: format).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all books
     - GET /authors

     - examples: [{contentType=application/json, example={
  "authors" : [ {
    "last_name" : "last_name",
    "id" : "id",
    "first_name" : "first_name"
  }, {
    "last_name" : "last_name",
    "id" : "id",
    "first_name" : "first_name"
  } ]
}}]
     - parameter format: (query)  (optional, default to json)

     - returns: RequestBuilder<AuthorsResponse> 
     */
    open class func authorsGetWithRequestBuilder(format: String? = nil) -> RequestBuilder<AuthorsResponse> {
        let path = "/authors"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "format": format
        ])


        let requestBuilder: RequestBuilder<AuthorsResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
