//
// Audiobook.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct Audiobook : Encodable, Decodable {

    public var _id: String?
    public var title: String?
    public var _description: String?
    public var genres: [Genre]?
    public var authors: [Author]?
    public var numSections: String?
    public var sections: [Section]?
    public var language: String?
    public var urlZipFile: String?
    public var urlLibrivox: String?
    public var urlProject: String?
    public var urlRss: String?
    public var totaltime: String?
    public var totaltimesecs: Int?
    
    public var imageUrl : String?
    public var timeStopped : Int?
    public var sectionStopped : String?
    public var isFav : Bool?
    
    public func getBookDictionaryWithTrending() -> [String: Any]? {
        do {
            var resultDictionary: [String: Any] = [
                "id": _id,
                "title": title,
                "description": _description,
                "genres": try encodeArray(genres!),
                "authors": try encodeArray(authors!),
                "numSections": numSections,
                "sections": try encodeArray(sections!),
                "language": language,
                "urlZipFile": urlZipFile,
                "urlLibrivox": urlLibrivox,
                "urlProject": urlProject,
                "urlRss": urlRss,
                "totaltime": totaltime,
                "totaltimesecs": totaltimesecs,
                "trending": "0"
            ]
            
            print(resultDictionary)
            return resultDictionary
        } catch {
            print("Error converting book to dictionary: \(error.localizedDescription)")
            return nil
        }
    }

    private func encodeArray<T: Encodable>(_ array: [T]) throws -> Any {
        let jsonData = try JSONEncoder().encode(array)
        let jsonObject = try JSONSerialization.jsonObject(with: jsonData, options: [])
        return jsonObject
    }

    
    public init(dict: [String:Any]) {
        self._id            = (dict["id"] as? String)!
        self.title          = (dict["title"       ] as? String)!
        self._description   = (dict["description"]  as? String)!
        self.genres         = try? decodeArray(dict["genres"])
        self.authors        = try? decodeArray(dict["authors"])
        self.numSections    = (dict["numSections"  ]as? String)!
        self.sections       = try? decodeArray(dict["sections"])
        self.language       = (dict["language"     ]as? String)!
        self.urlZipFile     = (dict["urlZipFile"]   as? String)!
        self.urlLibrivox    = (dict["urlLibrivox"  ]as? String)!
        self.urlProject     = (dict["urlProject"]   as? String)!
        self.urlRss         = (dict["urlRss"       ]as? String)!
        self.totaltime      = (dict["totaltime"]    as? String)!
        self.totaltimesecs  = (dict["totaltimesecs"]as? Int)!
    }
    
    private func decodeArray<T: Decodable>(_ jsonObject: Any) throws -> [T] {
        let jsonData = try JSONSerialization.data(withJSONObject: jsonObject)
        let array = try JSONDecoder().decode([T].self, from: jsonData)
        return array
    }



    public init(_id: String? = nil, title: String? = nil, _description: String? = nil, genres: [Genre]? = nil, authors: [Author]? = nil, numSections: String? = nil, sections: [Section]? = nil, language: String? = nil, urlZipFile: String? = nil, urlLibrivox: String? = nil, urlProject: String? = nil, urlRss: String? = nil, totaltime: String? = nil, totaltimesecs: Int? = nil) {
        self._id = _id
        self.title = title
        self._description = _description
        self.genres = genres
        self.authors = authors
        self.numSections = numSections
        self.sections = sections
        self.language = language
        self.urlZipFile = urlZipFile
        self.urlLibrivox = urlLibrivox
        self.urlProject = urlProject
        self.urlRss = urlRss
        self.totaltime = totaltime
        self.totaltimesecs = totaltimesecs
    }
    


    public enum CodingKeys: String, CodingKey { 
        case _id = "id"
        case title
        case _description = "description"
        case genres
        case authors
        case numSections = "num_sections"
        case sections
        case language
        case urlZipFile = "url_zip_file"
        case urlLibrivox = "url_librivox"
        case urlProject = "url_project"
        case urlRss = "url_rss"
        case totaltime
        case totaltimesecs
    }
    
}

